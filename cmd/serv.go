package cmd

import (
	"database/sql"
	"encoding/json"
	"fmt"
	"log"
	"net"
	"net/http"
	"os"
	"os/exec"
	"runtime"
	"strconv"
	"strings"

	"github.com/spf13/cobra"
)

// File Type
type File struct {
	ID   string `json:"id"`
	Name string `json:"name"`
}

// Files Type
type Files struct {
	Files []File `json:"files"`
	Total int    `json:"total"`
}

var (
	db           *sql.DB
	videoPerPage = 12
)

// servCmd represents the serv command
var servCmd = &cobra.Command{
	Use:   "serv",
	Short: "Serve your media using the file generated by 'scan'.",
	Long:  `Serve your media using the file generated by 'scan'.`,
	Run: func(cmd *cobra.Command, args []string) {
		if len(args) > 0 && fileExists(args[0]) {
			serv(args[0])
		} else {
			fmt.Println("Please specify a media file.")
		}
	},
}

func init() {
	rootCmd.AddCommand(servCmd)
}

func serv(dbFile string) {
	var err error
	db, err = sql.Open("sqlite3", dbFile)
	check(err)
	defer db.Close()

	http.HandleFunc("/random", serveRandom)
	http.HandleFunc("/recent", serveRecent)
	http.HandleFunc("/videos", serveVideos)
	http.HandleFunc("/search", serveSearch)
	http.HandleFunc("/file", serveFile)
	http.Handle("/", http.FileServer(http.Dir("web/build")))

	// get free port
	// listener, err := net.Listen("tcp", ":0")
	listener, err := net.Listen("tcp", ":9000")
	check(err)
	url := fmt.Sprintf("%s:%d", "http://localhost", listener.Addr().(*net.TCPAddr).Port)

	fmt.Println("Serving at", url)
	// openBrowser(url)

	err = http.Serve(listener, nil)
	if err != nil {
		fmt.Println(err.Error())
	}
}

func serveRandom(w http.ResponseWriter, r *http.Request) {
	row := db.QueryRow("SELECT id, name FROM media ORDER BY RANDOM() LIMIT 1")

	var file File
	row.Scan(&file.ID, &file.Name)

	data, err := json.Marshal(file)
	check(err)

	w.Header().Set("Content-Type", "application/json")
	w.Header().Set("Access-Control-Allow-Origin", "*")
	w.Write(data)
}

func serveRecent(w http.ResponseWriter, r *http.Request) {
	rows, err := db.Query("SELECT id, name FROM media WHERE opened IS NOT NULL ORDER BY opened DESC LIMIT 6")
	check(err)

	files := make([]File, 0)
	for rows.Next() {
		var file File
		rows.Scan(&file.ID, &file.Name)
		files = append(files, file)
	}

	data, err := json.Marshal(files)
	w.Header().Set("Content-Type", "application/json")
	w.Header().Set("Access-Control-Allow-Origin", "*")
	w.Write(data)
}

func serveVideos(w http.ResponseWriter, r *http.Request) {
	page, err := strconv.Atoi(r.URL.Query().Get("p"))
	check(err)

	rows, err := db.Query("SELECT id, name FROM media ORDER BY created DESC LIMIT ? OFFSET ?", videoPerPage, page*videoPerPage)
	check(err)

	files := make([]File, 0)
	for rows.Next() {
		var file File
		rows.Scan(&file.ID, &file.Name)
		files = append(files, file)
	}
	total := getVideosTotal()

	data, err := json.Marshal(Files{files, total})
	w.Header().Set("Content-Type", "application/json")
	w.Header().Set("Access-Control-Allow-Origin", "*")
	w.Write(data)
}

func serveSearch(w http.ResponseWriter, r *http.Request) {
	query := strings.ToLower(r.URL.Query().Get("q"))
	page, err := strconv.Atoi(r.URL.Query().Get("p"))
	check(err)

	rows, err := db.Query("SELECT id, name FROM media WHERE lower(name) like '%' || ? || '%' ORDER by name LIMIT ? OFFSET ?", query, videoPerPage, page*videoPerPage)
	check(err)

	files := make([]File, 0)
	for rows.Next() {
		var file File
		rows.Scan(&file.ID, &file.Name)
		files = append(files, file)
	}
	total := getSearchTotal(query)

	data, err := json.Marshal(Files{files, total})
	w.Header().Set("Content-Type", "application/json")
	w.Header().Set("Access-Control-Allow-Origin", "*")
	w.Write(data)
}

func serveFile(w http.ResponseWriter, r *http.Request) {
	id := r.URL.Query().Get("id")
	defer db.Exec("UPDATE media SET opened = CURRENT_TIMESTAMP WHERE id = ?", id)
	var path string
	db.QueryRow("SELECT path FROM media WHERE id = ?", id).Scan(&path)
	http.ServeFile(w, r, path)
}

func getVideosTotal() int {
	row := db.QueryRow("SELECT count(*) FROM media")
	var total int
	row.Scan(&total)
	return total
}

func getSearchTotal(query string) int {
	row := db.QueryRow("SELECT count(*) FROM media WHERE lower(name) like '%' || ? || '%'", query)
	var total int
	row.Scan(&total)
	return total
}

func openBrowser(url string) {
	var err error

	switch runtime.GOOS {
	case "linux":
		err = exec.Command("xdg-open", url).Start()
	case "windows":
		err = exec.Command("rundll32", "url.dll,FileProtocolHandler", url).Start()
	case "darwin":
		err = exec.Command("open", url).Start()
	default:
		err = fmt.Errorf("unsupported platform")
	}

	if err != nil {
		log.Fatal(err)
	}
}

func fileExists(filename string) bool {
	info, err := os.Stat(filename)
	if os.IsNotExist(err) {
		return false
	}
	return !info.IsDir()
}
