package cmd

import (
	"fmt"
	"log"
	"net"
	"net/http"
	"os/exec"
	"runtime"

	"github.com/spf13/cobra"
)

// servCmd represents the serv command
var servCmd = &cobra.Command{
	Use:   "serv",
	Short: "Serve your media using the file generated by 'scan'.",
	Long:  `Serve your media using the file generated by 'scan'.`,
	Run: func(cmd *cobra.Command, args []string) {
		up()
	},
}

func init() {
	rootCmd.AddCommand(servCmd)
}

func serveHTTP(w http.ResponseWriter, r *http.Request) {
	http.ServeFile(w, r, "/Volumes/Seagate/Video/4 Star/Movie/America/1999，大开眼戒Eyes.Wide.Shut.1999.BD.MiniSD-TLF.mkv")
}

func up() {
	http.HandleFunc("/random", serveHTTP)

	http.Handle("/", http.FileServer(http.Dir("client/build")))

	// get free port
	listener, err := net.Listen("tcp", ":0")
	check(err)
	url := fmt.Sprintf("%s:%d", "http://localhost", listener.Addr().(*net.TCPAddr).Port)

	fmt.Println("Serving at", url)
	openBrowser(url)

	err = http.Serve(listener, nil)
	if err != nil {
		fmt.Println(err.Error())
	}
}

func openBrowser(url string) {
	var err error

	switch runtime.GOOS {
	case "linux":
		err = exec.Command("xdg-open", url).Start()
	case "windows":
		err = exec.Command("rundll32", "url.dll,FileProtocolHandler", url).Start()
	case "darwin":
		err = exec.Command("open", url).Start()
	default:
		err = fmt.Errorf("unsupported platform")
	}

	if err != nil {
		log.Fatal(err)
	}
}
